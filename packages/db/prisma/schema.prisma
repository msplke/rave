// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// My Models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  communities Community[]
  events      Event[]
  // follows     Follow[]
  // bookmarks   Bookmark[]
}

model Community {
  id     String @id @default(cuid())
  handle String @unique
  name   String
  about  String

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String

  createdAt DateTime @default(now())

  events Event[]
  // followers Follow[]

  @@index([ownerId])
}

model Event {
  id      String @id @default(cuid())
  title   String
  content String

  community   Community @relation(fields: [communityId], references: [id])
  communityId String

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // bookmarks Bookmark[]

  @@index([communityId])
  @@index([creatorId])
}

// model Follow {
//   id String @id @default(cuid())

//   community   Community @relation(fields: [communityId], references: [id])
//   communityId String

//   user   User   @relation(fields: [userId], references: [id])
//   userId String

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@unique([communityId, userId])
//   @@index([userId])
// }

// model Bookmark {
//   id String @id @default(cuid())

//   event   Event  @relation(fields: [eventId], references: [id])
//   eventId String

//   user   User   @relation(fields: [userId], references: [id])
//   userId String

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@unique([eventId, userId])
//   @@index([userId])
// }
